package text_info

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"math"
	"net/http"
	"os"
	"strings"
	"text/template"
)

var zipToken string
var weatherToken string

func init() {
	zipToken = os.Getenv("MAP_API_KEY")
	if zipToken == "" {
		panic("MAP_API_KEY env variable must be set")
	}

	weatherToken = os.Getenv("WEATHER")
	if weatherToken == "" {
		panic("WEATHER env variable must be set")
	}
}

func GetWeather(zip string) (string, error) {

	zipComposedURL := fmt.Sprintf(`https://maps.googleapis.com/maps/api/geocode/json?&components=postal_code:%s&key=%s`,
		zip,
		zipToken)

	resp, err := http.Get(zipComposedURL)
	if err != nil {
		fmt.Println("error getting location: ", err.Error())
		return "", errors.New("error. check your zip code to see if it's correct. If it is, there's something wrong on our end")
	}

	if resp.StatusCode != 200 {
		fmt.Println("non 200 status: ", resp.StatusCode)
		return "", errors.New("error looking up your location. currently we only accept US and Canadian zip codes for weather look ups. Something like 'Weather for 95555'")
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("error reading body: ", err.Error())
		return "", errors.New("sorry, there's something wrong on our end")
	}

	var respBody GoogleZip

	err = json.Unmarshal(body, &respBody)
	if err != nil {
		fmt.Println("error unmarshalling json: ", err.Error())
		return "", errors.New("sorry, there's something wrong on our end")
	}

	if strings.ToLower(respBody.Status) != "ok" || len(respBody.Results) < 1 {
		fmt.Println(respBody)
		return "", errors.New("could not find zip: " + zip)
	}

	lat := respBody.Results[0].Geometry.Location.Lat
	lon := respBody.Results[0].Geometry.Location.Lng

	url := `https://api.openweathermap.org/data/2.5/onecall?lat=%v&lon=%v&appid=%s&units=imperial`
	weatherURL := fmt.Sprintf(url, lat, lon, weatherToken)

	resp, err = http.Get(weatherURL)
	if err != nil {
		fmt.Println("error getting weather: ", err.Error())
		return "", errors.New("sorry, there's something wrong on our end")
	}

	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("error reading weather response: ", err.Error())
		return "", errors.New("sorry, there's something wrong on our end")
	}

	var weatherBody AutoGenerated

	err = json.Unmarshal(body, &weatherBody)
	if err != nil {
		fmt.Println("error unmarshalling weather response: ", err.Error())
		return "", errors.New("sorry, there's something wrong on our end")
	}

	fm := template.FuncMap{
		"mul": func(a, b float64) float64 {
			return math.Round(a * b)
		},
		"cel": func(f float64) float64 {
			return math.Round((f - 32.00) * (5.0 / 9.0))
		},
		"round": func(f float64) float64 {
			return math.Round(f)
		},
		"kph": func(f float64) float64 {
			return math.Round(1.609 * f)
		},
	}

	temp := template.Must(template.New("").Funcs(fm).Parse(`current: {{range $d := .Current.Weather}} {{$d.Description}} {{end}}
temp: {{round .Current.Temp}} ({{cel .Current.Temp}} c)
feels like: {{round .Current.FeelsLike}} ({{cel .Current.FeelsLike}} c)
wind speed: {{round .Current.WindSpeed}} ({{kph .Current.WindSpeed}} kph)

daily (including today) [high (f/c), low (f/c), chance of precipitation, wind speed (mph/kph), description]:
{{range $v := .Daily}}
** {{round $v.Temp.Max}}/{{cel $v.Temp.Max}}, {{round $v.Temp.Min}}/{{cel $v.Temp.Min}}, %{{mul $v.Pop 100}}, {{round $v.WindSpeed}}/{{kph $v.WindSpeed}}, {{range $d := $v.Weather}} {{$d.Description}} {{end}} {{end}}
`))

	var tpl bytes.Buffer
	err = temp.Execute(&tpl, weatherBody)
	if err != nil {
		fmt.Println("error executing template: ", err.Error())
		return "", errors.New("sorry, there's something wrong on our end")
	}

	return tpl.String(), nil
}

// generated from: https://mholt.github.io/json-to-go/
type AutoGenerated struct {
	Current struct {
		FeelsLike float64 `json:"feels_like"`
		Temp      float64 `json:"temp"`
		Weather   []struct {
			Description string `json:"description"`
		} `json:"weather"`
		WindSpeed float64 `json:"wind_speed"`
	} `json:"current"`
	Daily []struct {
		Dt   int     `json:"dt"`
		Pop  float64 `json:"pop"`
		Rain float64 `json:"rain,omitempty"`
		Temp struct {
			Max float64 `json:"max"`
			Min float64 `json:"min"`
		} `json:"temp"`
		Weather []struct {
			Description string `json:"description"`
		} `json:"weather"`
		WindSpeed float64 `json:"wind_speed"`
	} `json:"daily"`
}

type GoogleZip struct {
	Results []struct {
		Geometry struct {
			Location struct {
				Lat float64 `json:"lat"`
				Lng float64 `json:"lng"`
			} `json:"location"`
		} `json:"geometry"`
	} `json:"results"`
	Status string `json:"status"`
}
